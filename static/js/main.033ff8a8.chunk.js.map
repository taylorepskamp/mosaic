{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","listStyle","padding","spacing","margin","chip","App","useState","file","setFile","cmWidth","setCmWidth","displayRatio","setDisplayRatio","canvasRef","useRef","isLight","parentCanvasWidth","setParentCanvasWidth","done","setDone","canvasParentRef","firstUpdate","csvData","setcsvData","hexInput","setHexInput","classes","React","key","label","chipData","setChipData","useEffect","current","offsetWidth","length","createPreview","alert","img","Image","src","onload","canvas","context","getContext","imgWidth","naturalWidth","ratio","naturalHeight","numDiceWidth","Math","ceil","numDiceHeight","size","width","height","drawImage","imgPixels","getImageData","clearRect","data","indexRows","y","indexColumns","x","i","rInput","gInput","bInput","hex","map","toString","join","fillColors","colorObj","nearestColor","require","from","push","xnew","ynew","fillStyle","fillRect","className","Helmet","name","content","Typography","gutterBottom","variant","component","color","handleFiles","files","base64","Button","startIcon","TextField","id","type","defaultValue","InputLabelProps","shrink","onChange","event","e","numberOfDice","input","parseInt","target","value","parseFloat","toFixed","onClick","test","Paper","chipToDelete","Chip","icon","disabled","onDelete","chips","filter","error","helperText","ref","Card","CardActionArea","CardContent","flat","CardActions","filename","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.033ff8a8.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect} from 'react';\nimport ReactFileReader from 'react-file-reader';\nimport './App.css';\nimport { CSVLink } from \"react-csv\";\nimport { Button } from '@material-ui/core';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport TextField from '@material-ui/core/TextField';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';  \nimport {Helmet} from 'react-helmet'\nimport Chip from '@material-ui/core/Chip';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    listStyle: 'none',\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n}));\n\nfunction App() {\n  let [file, setFile] = useState('')\n  let [cmWidth,setCmWidth] = useState(64)\n  let [displayRatio,setDisplayRatio] = useState(1)\n  const canvasRef = useRef(null)\n  let [isLight,setIsLight] = useState(true)\n  let [parentCanvasWidth,setParentCanvasWidth] = useState(600)\n  let [done,setDone] = useState(true)\n  const canvasParentRef = useRef(null);\n  const firstUpdate = useRef(true);\n  let [csvData,setcsvData] = useState([])\n  let [hexInput,setHexInput] = useState('#')\n\n  const classes = useStyles();\n  const [chipData, setChipData] = React.useState([\n    {key:'e', label:'#EEEEEE'},\n    {key:'c', label:'#CCCCCC'},\n    {key:'9', label:'#999999'},\n    {key:'6', label:'#666666'},\n    {key:'3', label:'#333333'},\n    {key:'0', label:'#000000'},\n  ]); \n\n  const handleDelete = (chipToDelete) => () => {\n    setChipData((chips) => chips.filter((chip) => chip.key !== chipToDelete.key));\n  };\n  \n  const onHexInputChange = (e) => {\n    setHexInput(e.target.value)\n  }\n\n  const hexPush = () => {\n    if(/^#([0-9A-F]{3}){1,2}$/i.test(hexInput)){\n     \n      setChipData([...chipData, {key: hexInput, label: hexInput}])\n    }\n  }\n\n  //handles the dice in the input field and updates cmwidth,which then calls the dicemaker function\n  const onChange = (e) => {\n    let numberOfDice\n    //checks input is an integer\n    let input = parseInt(e.target.value)\n    //too many dice alert\n    if(input>500) {alert('Please enter a number less than 500')}\n    //if input is an integer and less than 200\n    input && e.target.value< 500 ? numberOfDice = input : numberOfDice = 1\n    setCmWidth(parseFloat((numberOfDice*1.6).toFixed(1)))\n  }\n\n  //loads the files initially and stores src\n  const handleFiles = files => {\n    const img = new Image()\n    img.src = files.base64\n    setFile(img.src) \n  }\n\n  //monitors changes in any of the variables in the array and calls the dice mosiac maker\n  useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n    } else {\n      setParentCanvasWidth(canvasParentRef.current ? canvasParentRef.current.offsetWidth : 0)\n      if(chipData.length > 1){\n        createPreview()\n        setDone(false)\n      }\n      else{\n        alert('Please add at least 2 colors')\n      }\n    }\n  }, [file,isLight,chipData,cmWidth,canvasParentRef.current]);\n\n  \n\n   const createPreview = () => {\n      const img = new Image()\n      img.src = file\n      img.onload = () => {\n          //creating the canvas for photomosaic\n          const canvas = canvasRef.current\n          const context = canvas.getContext('2d')\n          let imgWidth = img.naturalWidth\n          let imgHeight = img.naturalHeight\n  \n          //ratio needed to calculate length of the mosiac\n          let ratio = imgHeight/imgWidth\n          \n          //needed to update the text displayed for length in return statement\n          setDisplayRatio(ratio)\n          \n          //dice are 1.6 cm wide, cmWidth is the default number used to calc mosiac size in cms\n          let numDiceWidth = Math.ceil(cmWidth / 1.6)\n          let numDiceHeight = Math.ceil(ratio * cmWidth / 1.6)\n          \n          \n          //set canvas to max width\n          //let fixedCanvasWidth = 600\n      \n          //needed to calculate the size of the dice images in context of the canvas width\n          let size = Math.ceil(parentCanvasWidth / numDiceWidth)\n\n          //sets canvas size to expected dimensions of mosiac\n          canvas.width = size * numDiceWidth\n          canvas.height = size * numDiceHeight\n\n          //reduce image to size where 1 pixel = 1 die\n          context.drawImage(img,0,0,numDiceWidth,numDiceHeight);\n          //place reduced image into array for the for loop\n\n          let imgPixels = context.getImageData(0, 0, numDiceWidth, numDiceHeight);\n          //clears canvas of the drawn image\n          context.clearRect(0, 0, numDiceWidth, numDiceHeight);\n\n          \n          \n          //makes it so you dont need to type impixels.data in the for loop\n          let data = imgPixels.data\n          let indexRows = []\n          for(let y = 0; y < imgPixels.height; y++){\n            let indexColumns = []\n            for(let x = 0; x < imgPixels.width; x++){\n            //find current row by calc-ing the length and the current count\n            let currentRow = (4 * imgPixels.width) * y \n            // find current index within the row\n            let currentPixelInRow = (x * 4)\n            // sum both in order to find your index in the current row\n            let i = currentRow + currentPixelInRow\n            //getting the average gray value\n\n            let rInput = data[i]\n            let gInput = data[i+1]\n            let bInput = data[i+2]\n\n            const rgbToHex = (r, g, b) => '#' + [r, g, b].map(x => {\n              const hex = x.toString(16)\n              return hex.length === 1 ? '0' + hex : hex\n            }).join('')\n\n            let hex = rgbToHex(rInput,gInput,bInput)\n           \n            let fillColors = chipData.map(colorObj => colorObj.label);\n\n            let nearestColor = require('nearest-color').from(fillColors);\n\n            indexColumns.push(nearestColor(hex))\n\n            nearestColor(hex)\n    \n            //calculates postion of dice based on x and y in for loop\n            let xnew = x * size\n            let ynew = y * size\n            \n            //draws dice image at the desired locations\n            context.fillStyle = nearestColor(hex)\n            context.fillRect(xnew,ynew, xnew+size, ynew + size)\n          }\n          indexRows.push(indexColumns)\n        }\n        setDone(true)\n        setcsvData(indexRows)\n    }\n  } \n  //toggles which array to use in mosiac maker function, light or dark\n  const checkClick = () => {\n    isLight ? setIsLight(false) : setIsLight(true)\n  }\n  \n\n    return (\n      <div className='grid-container'>\n      <Helmet>\n      <title>Mozaic: A Mosiac Generator to Create and Export Tile Mosiacs</title>\n      <meta name=\"description\" content=\"Upload photos and easily convert them into tiled mosiacs. Choose colors to represent your tiles. Adjust the number of tiles in your mosiac. Export your design to a CSV file.\" />\n      </Helmet>\n\n      \n        \n  \n      <div className='uploadArea'>\n      \n       <div className=\"logo\">\n            <Typography className='logoTitle' gutterBottom variant=\"h3\" component=\"h3\" color='primary'>\n              Mozaic |\n            </Typography>\n            <Typography className='logoDescription' gutterBottom variant=\"h5\" component=\"h5\" color='primary'>\n              Create, Export Tile Mosiacs\n            </Typography>\n        </div>\n\n\n        <div className='upload'>\n          <ReactFileReader handleFiles={handleFiles} base64={true}>\n              <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<CloudUploadIcon />}\n            >\n              Upload\n          </Button>\n          </ReactFileReader>\n        </div>\n\n\n        <div className='inputTile'>\n          <TextField\n          id=\"outlined-number\"\n          label=\"Tiles\"\n          type=\"number\"\n          defaultValue='40'\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant=\"outlined\"\n          onChange={(event) => onChange(event)}\n           />\n        </div>\n\n        <div className='hexButton'>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick= {hexPush}\n            >\n              Add\n            </Button>\n        </div>\n\n        <div className='hex'>\n            <Paper id='hexChild' component=\"ul\" className={classes.root} >\n            {chipData.map((data) => {\n              \n              let icon\n              return (\n                <li key={data.key}>\n                  <Chip\n                    icon={<input className = 'color' type=\"color\" disabled value={data.label}></input>}\n                    label={data.label}\n                    onDelete={handleDelete(data)}\n                    className={classes.chip}\n                  />\n                </li>\n              );\n            })}\n            </Paper>\n        </div>\n\n        \n\n      <div className='inputColor'>\n        <TextField id=\"hex\" label=\"Hex\" name=\"hex\"\n          value={hexInput}\n          onChange={(event) =>  onHexInputChange(event)}\n          error={hexInput!=='#' && !/^#([0-9A-F]{3}){1,2}$/i.test(hexInput)}\n          helperText={hexInput!=='#' && !/^#([0-9A-F]{3}){1,2}$/i.test(hexInput) ? 'Invalid hex.' : ' '}\n          variant=\"outlined\"\n        />\n      </div>\n      </div>\n      <div className='widthInfoArea'>\n      <div className='widthInfo'>\n        <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\n           {Math.ceil(cmWidth / 1.6)} tiles\n        </Typography>\n      </div>\n      {done === false && file ?  \n              <Typography className='loadingInfo' variant=\"body1\" color=\"textSecondary\" component=\"p\">\n                 Tiling...\n              </Typography> : <div></div>}\n      </div>\n      <div className='lengthInfo'>\n        <div className='length'>\n        <Typography variant=\"body1\" id=\"rotate-text\" color=\"textSecondary\" component=\"p\">\n          {Math.ceil(displayRatio * cmWidth / 1.6)} tiles\n        </Typography>\n        </div>\n      </div>\n\n      <div ref={canvasParentRef} className ='imgParent'>\n        <Card >\n          <CardActionArea >\n          <canvas ref={canvasRef}/> \n            <CardContent>\n              <Typography variant=\"h6\" color=\"textSecondary\" component=\"h6\">\n                {Math.ceil(cmWidth / 1.6)*Math.ceil(displayRatio * cmWidth / 1.6)} tiles\n              </Typography>\n              {csvData.length>0 ? chipData.map(chip => {\n\n               return <div className='tileCount'>\n                      <input className = 'color' type=\"color\" disabled value={chip.label}></input>\n                      <Typography variant=\"p\" color=\"textSecondary\" component=\"p\">\n                        {chip.label}, {csvData.flat().filter(x => x === chip.label).length} tiles \n                      </Typography>\n                      </div>\n              })\n               : <Typography variant=\"body\" color=\"textSecondary\" component=\"p\">\n                  Upload a photo, adjust number of tiles, remove grays, add desired hex codes.\n                 </Typography>}\n            </CardContent>\n          </CardActionArea>\n          <CardActions>\n            \n            <Button size=\"small\" color=\"primary\">\n              <CSVLink className='link' data={csvData} filename={\"mosiac.csv\"}>Export</CSVLink>\n            </Button>\n            <Button size=\"small\" color=\"primary\" href=\"https://amzn.to/32vk1WF\" target='_blank'>\n              Tiles on Amazon\n            </Button>\n\n    \n\n          </CardActions>\n        </Card>\n        <Typography variant=\"body2\" color=\"textSecondary\" className='affiliate' component=\"p\">\n          Disclosure: As an Amazon Associate, I would earn from qualifying purchases.\n        </Typography>\n     \n      </div>\n    </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}