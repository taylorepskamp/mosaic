{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","listStyle","padding","spacing","margin","chip","App","useState","file","setFile","cmWidth","setCmWidth","displayRatio","setDisplayRatio","canvasRef","useRef","parentCanvasWidth","setParentCanvasWidth","isDoneTiling","setIsDoneTiling","canvasParentRef","firstUpdate","csvData","setcsvData","hexInput","setHexInput","classes","chipData","setChipData","colorQuant","setColorQuant","isManual","setIsManual","useEffect","current","offsetWidth","img","Image","src","onload","hexColors","ColorThief","getPalette","map","rgb","x","hex","toString","length","join","hexObjs","color","key","Math","floor","random","label","toUpperCase","canvas","context","getContext","imgWidth","naturalWidth","ratio","naturalHeight","numDiceWidth","ceil","numDiceHeight","size","width","height","drawImage","imgPixels","getImageData","clearRect","data","indexRows","y","indexColumns","i","nearestColor","require","from","xnew","ynew","fillStyle","fillRect","push","autoMakeMosaic","console","log","fillColors","colorObj","alert","manualMakeMosaic","className","Helmet","name","content","Typography","gutterBottom","variant","component","handleFiles","files","base64","Button","startIcon","FormControlLabel","control","Switch","checked","onChange","TextField","id","type","defaultValue","InputLabelProps","shrink","event","e","input","parseInt","target","value","onColorQtyChange","numberOfDice","parseFloat","toFixed","error","test","helperText","onClick","uid","Paper","Chip","icon","disabled","onDelete","chipToDelete","chips","filter","ref","Card","CardActionArea","CardContent","flat","CardActions","filename","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.64e70267.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect} from 'react';\nimport ReactFileReader from 'react-file-reader';\nimport './App.css';\nimport './AppMobile.css';\nimport { CSVLink } from \"react-csv\";\nimport { Button } from '@material-ui/core';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport TextField from '@material-ui/core/TextField';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';  \nimport {Helmet} from 'react-helmet'\nimport Chip from '@material-ui/core/Chip';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nimport ColorThief from '../node_modules/colorthief/dist/color-thief.mjs';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    listStyle: 'none',\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n}));\n\n\nfunction App() {\n  \n  let [file, setFile] = useState('')\n  let [cmWidth,setCmWidth] = useState(64)\n  let [displayRatio,setDisplayRatio] = useState(1)\n  const canvasRef = useRef(null)\n  let [parentCanvasWidth,setParentCanvasWidth] = useState(800)\n  let [isDoneTiling,setIsDoneTiling] = useState(true)\n  const canvasParentRef = useRef(null);\n  const firstUpdate = useRef(true);\n  let [csvData,setcsvData] = useState([])\n  let [hexInput,setHexInput] = useState('#')\n  const classes = useStyles();\n  const [chipData, setChipData] = useState([]); \n  const [colorQuant, setColorQuant] = useState(5); \n  const [isManual, setIsManual] = useState(false)\n  //removes a chip if it is deleted by the user\n  const handleDelete = (chipToDelete) => () => {\n    setChipData((chips) => chips.filter((chip) => chip.key !== chipToDelete.key));\n  };\n  //tracks what is being typed in the hex field\n  const onHexInputChange = (e) => {\n    setHexInput(e.target.value)\n  }\n  //onclick function for the add button to add the hex code to the chip array\n  const hexPush = () => {\n    if(/^#([0-9A-F]{3}){1,2}$/i.test(hexInput)){\n      let uid = Math.floor((Math.random())*100000000)\n      setChipData([...chipData, {key: uid, label: hexInput}])\n      // let updated = colorQuant + 1\n      // setColorQuant(updated)\n    }\n  }\n  //handles the dice in the input field and updates cmwidth,which then calls the dicemaker function\n  const onChange = (e) => {\n    let numberOfDice\n    //checks input is an integer\n    let input = parseInt(e.target.value)\n    //too many dice alert\n    if(input>=500) {alert('Please enter a number less than 500')}\n    //if input is an integer and less than 200\n    input < 500 && input  > 0 ? numberOfDice = input : numberOfDice = 1\n    setCmWidth(parseFloat((numberOfDice*1.6).toFixed(1)))\n  }\n  //\n  const onColorQtyChange = (e) => {\n    let input = parseInt(e.target.value)\n    input > 0 ? setColorQuant(input) : alert('Please enter a number greater than 1')\n\n  }\n  const handleChange = () => {\n    setIsManual(isManual ? false : true);\n  };\n  //loads the files initially and stores src\n  const handleFiles = files => {\n    const img = new Image()\n    img.src = files.base64\n    setFile(img.src)\n  }\n\n  const manualMakeMosaic = () => {\n    //adjust canvas size to based on screen width (smaller for mobile)\n    setParentCanvasWidth(canvasParentRef.current ? canvasParentRef.current.offsetWidth : 0)\n    //if there's at least two colors in chip array\n    if(chipData.length > 1){\n      //start the 'tiling...' message\n      setIsDoneTiling(false)\n      console.log(isDoneTiling)\n      const img = new Image()\n      img.src = file\n      img.onload = () => {\n        //creating the canvas for photomosaic\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d')\n        let imgWidth = img.naturalWidth\n        let imgHeight = img.naturalHeight\n        //ratio needed to calculate length of the mosiac\n        let ratio = imgHeight/imgWidth\n        //needed to update the text displayed for length in return statement\n        setDisplayRatio(ratio)\n        //dice are 1.6 cm wide, cmWidth is the default number used to calc mosiac size in cms\n        let numDiceWidth = Math.ceil(cmWidth / 1.6)\n        let numDiceHeight = Math.ceil(ratio * cmWidth / 1.6)\n        //needed to calculate the size of the dice images in context of the canvas width\n      \n        let size = Math.ceil(parentCanvasWidth / numDiceWidth)\n        //sets canvas size to expected dimensions of mosiac\n        canvas.width = size * numDiceWidth\n        canvas.height = size * numDiceHeight\n        //reduce image to size where 1 pixel = 1 die\n        context.drawImage(img,0,0,numDiceWidth,numDiceHeight);\n        //place reduced image into array for the for loop\n        let imgPixels = context.getImageData(0, 0, numDiceWidth, numDiceHeight);\n        //clears canvas of the drawn image\n        context.clearRect(0, 0, numDiceWidth, numDiceHeight);\n        //makes it so you dont need to type impixels.data in the for loop\n        let data = imgPixels.data\n        let indexRows = []\n        for(let y = 0; y < imgPixels.height; y++){\n          let indexColumns = []\n          for(let x = 0; x < imgPixels.width; x++){\n          //find current row by calc-ing the length and the current count\n          let currentRow = (4 * imgPixels.width) * y \n          // find current index within the row\n          let currentPixelInRow = (x * 4)\n          // sum both in order to find your index in the current row\n          let i = currentRow + currentPixelInRow\n          //getting the RGB\n          let r = data[i]\n          let g = data[i+1]\n          let b = data[i+2]\n          //convert RGB to hex\n          let hex = '#' + [r, g, b].map(x => {\n            const hex = x.toString(16)\n            return hex.length === 1 ? '0' + hex : hex\n          }).join('')\n          //create array of tile colors\n          let fillColors = chipData.map(colorObj => colorObj.label);\n          //set up function to find nearest color from provided tile array\n          let nearestColor = require('nearest-color').from(fillColors);\n          //calculates postion of dice based on x and y in for loop\n          let xnew = x * size\n          let ynew = y * size\n          //draws dice image at the desired locations\n          context.fillStyle = nearestColor(hex) \n          context.fillRect(xnew,ynew, xnew+size, ynew + size)\n          // context.strokeStyle = \"#999999\"\n          // context.lineWidth = 1\n          // context.strokeRect(xnew,ynew, xnew+size, ynew + size)\n          //adds the hex to the csv row\n          indexColumns.push(nearestColor(hex))\n        }\n        //adds row of hex values to the csvData array (each row is a row in a csv)\n        indexRows.push(indexColumns)\n      }\n      //this sets the csvData variable to the data created from the most recent tiling\n      setIsDoneTiling(true)\n      setcsvData(indexRows)\n      \n      }\n      //this deactivates the 'tiling...' message after the for loop is done\n    }\n    else{\n      alert('Please add at least two colors')\n    }\n          \n    \n  }\n  const autoMakeMosaic = () =>  {\n    //adjust canvas size to based on screen width (smaller for mobile)\n    setParentCanvasWidth(canvasParentRef.current ? canvasParentRef.current.offsetWidth : 0)\n    //if there's at least two colors in chip array\n    if(colorQuant > 1){\n      //start the 'tiling...' message\n      setIsDoneTiling(false)\n      \n      \n      const img = new Image()\n      img.src = file\n      img.onload = () => {\n        const colorThief = new ColorThief()\n        const rgbColors =  colorThief.getPalette(img,colorQuant)\n        let hexColors = rgbColors.map(rgb => {\n            return( '#' + rgb.map(x => {\n              const hex = x.toString(16)\n              return hex.length === 1 ? '0' + hex : hex\n            }).join(''))\n        })\n        let hexObjs = hexColors.map(color => {\n          return (\n            {\n              key: Math.floor(Math.random() * Math.floor(100000)),\n              label: color.toUpperCase()\n            }\n          )\n        })\n        //creating the canvas for photomosaic\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d')\n        let imgWidth = img.naturalWidth\n        let imgHeight = img.naturalHeight\n        //ratio needed to calculate length of the mosiac\n        let ratio = imgHeight/imgWidth\n        //needed to update the text displayed for length in return statement\n        setDisplayRatio(ratio)\n        //dice are 1.6 cm wide, cmWidth is the default number used to calc mosiac size in cms\n        let numDiceWidth = Math.ceil(cmWidth / 1.6)\n        let numDiceHeight = Math.ceil(ratio * cmWidth / 1.6)\n        //needed to calculate the size of the dice images in context of the canvas width\n      \n        let size = Math.ceil(parentCanvasWidth / numDiceWidth)\n        //sets canvas size to expected dimensions of mosiac\n        canvas.width = size * numDiceWidth\n        canvas.height = size * numDiceHeight\n        //reduce image to size where 1 pixel = 1 die\n        context.drawImage(img,0,0,numDiceWidth,numDiceHeight);\n        //place reduced image into array for the for loop\n        let imgPixels = context.getImageData(0, 0, numDiceWidth, numDiceHeight);\n        //clears canvas of the drawn image\n        context.clearRect(0, 0, numDiceWidth, numDiceHeight);\n        //makes it so you dont need to type impixels.data in the for loop\n        let data = imgPixels.data\n        let indexRows = []\n        for(let y = 0; y < imgPixels.height; y++){\n          let indexColumns = []\n          for(let x = 0; x < imgPixels.width; x++){\n          //find current row by calc-ing the length and the current count\n          let currentRow = (4 * imgPixels.width) * y \n          // find current index within the row\n          let currentPixelInRow = (x * 4)\n          // sum both in order to find your index in the current row\n          let i = currentRow + currentPixelInRow\n          //getting the RGB\n          let r = data[i]\n          let g = data[i+1]\n          let b = data[i+2]\n          //convert RGB to hex\n          let hex = '#' + [r, g, b].map(x => {\n            const hex = x.toString(16)\n            return hex.length === 1 ? '0' + hex : hex\n          }).join('')\n          //create array of tile colors\n          // let fillColors = chipData.map(colorObj => colorObj.label);\n          \n          //set up function to find nearest color from provided tile array\n          let nearestColor = require('nearest-color').from(hexColors);\n          //calculates postion of dice based on x and y in for loop\n          let xnew = x * size\n          let ynew = y * size\n          //draws dice image at the desired locations\n          context.fillStyle = nearestColor(hex) \n          context.fillRect(xnew,ynew, xnew+size, ynew + size)\n          // context.strokeStyle = \"#999999\"\n          // context.lineWidth = 1\n          // context.strokeRect(xnew,ynew, xnew+size, ynew + size)\n          //adds the hex to the csv row\n          indexColumns.push(nearestColor(hex))\n        }\n        //adds row of hex values to the csvData array (each row is a row in a csv)\n        indexRows.push(indexColumns)\n      }\n      //this sets the csvData variable to the data created from the most recent tiling\n      setChipData(hexObjs)\n      setcsvData(indexRows)\n      //this deactivates the 'tiling...' message after the for loop is done\n      setIsDoneTiling(true)\n      }\n    }\n  }\n  //monitors changes in any of the variables in the array and calls the dice mosiac maker\n  useEffect( () => {\n    if(firstUpdate.current) {\n      //ensures that create preview isn't called during the first loading of the components when there is no image file yet\n      firstUpdate.current = false;\n      }\n    else {\n      if(!isManual){\n        autoMakeMosaic()\n      }\n    }\n  }, [file,colorQuant,cmWidth,parentCanvasWidth, isManual]) \n\n  useEffect( () => {\n    if(firstUpdate.current) {\n      //ensures that create preview isn't called during the first loading of the components when there is no image file yet\n      firstUpdate.current = false;\n      }\n    else {\n      if(isManual){\n        manualMakeMosaic()\n      }\n    }\n  }, [file,cmWidth,parentCanvasWidth, isManual, chipData]) \n\n    return (\n      <div className='grid-container'>\n        <Helmet>\n        <title>Mozaic: A Mosiac Generator to Create and Export Tile Mosiacs</title>\n        <meta name=\"description\" content=\"Upload photos and easily convert them into tiled mosiacs. Choose colors to represent your tiles. Adjust the number of tiles in your mosiac. Export your design to a CSV file.\" />\n        </Helmet>\n  \n      <div className='uploadArea'>\n        <div className=\"logo\">\n              <Typography className='logoTitle' gutterBottom variant=\"h3\" component=\"h3\" color='primary'>\n                Mozaic |\n              </Typography>\n              <Typography className='logoDescription' gutterBottom variant=\"h5\" component=\"h5\" color='primary'>\n                Create, Export Tile Mosiacs\n              </Typography>\n        </div>\n        <div className='upload'>\n          <ReactFileReader handleFiles={handleFiles} base64={true}>\n              <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<CloudUploadIcon />}\n            >\n              Upload\n          </Button>\n          </ReactFileReader>\n        </div>\n        <div className='toggle'>\n          <FormControlLabel\n          control={<Switch checked={isManual} onChange={handleChange} name=\"checkedA\" />}\n          label={isManual ? \"Edit Color\" : \"Auto Color\"}/>\n        </div>\n        {/* inputColorQTY */}\n        {!isManual && <div className='position2'>\n          <TextField\n          id=\"outlined-number\"\n          label=\"Colors\"\n          type=\"number\"\n          defaultValue='5'\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant=\"outlined\"\n          onChange={(event) => onColorQtyChange(event)}\n           />\n        </div>}\n        <div className='inputTile'>\n          <TextField\n          id=\"outlined-number\"\n          label=\"Tiles\"\n          type=\"number\"\n          defaultValue='40'\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant=\"outlined\"\n          onChange={(event) => onChange(event)}\n           />\n        </div>\n        {/* hexInput */}\n        {isManual && <div className='position1'>\n        <TextField id=\"hex\" label=\"Hex\" name=\"hex\"\n          value={hexInput}\n          onChange={(event) =>  onHexInputChange(event)}\n          error={hexInput!=='#' && !/^#([0-9A-F]{3}){1,2}$/i.test(hexInput)}\n          helperText={hexInput!=='#' && !/^#([0-9A-F]{3}){1,2}$/i.test(hexInput) ? 'Invalid hex.' : ' '}\n          variant=\"outlined\"\n        />\n      </div>}\n      {/* hexButton */}\n        {isManual && <div className='position2'>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick= {hexPush}\n            >\n              Add\n            </Button>\n        </div>}\n        <div className='hex'>\n            <Paper id='hexChild' component=\"ul\" className={classes.root} >\n            {chipData.map((data) => {\n              \n              return (\n                <li key={data.key}>\n                  <Chip\n                    icon={<input className = 'color' type=\"color\" disabled value={data.label}></input>}\n                    label={data.label}\n                    onDelete={isManual ? handleDelete(data) : null}\n                    className={classes.chip}\n                  />\n                </li>\n              );\n            })}\n            </Paper>\n        </div>\n      </div>\n     \n      <div className='widthInfoArea'>\n\n      {!isDoneTiling && file ?  \n            <Typography className='loadingInfo' variant=\"body1\" color=\"textSecondary\" component=\"p\">\n              Tiling...\n            </Typography> : \n\n            <div></div>\n      }\n\n        <div className='widthInfo'>\n       \n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\n            {Math.ceil(cmWidth / 1.6)} tiles\n          </Typography>\n        </div>\n      \n      </div>\n      <div className='lengthInfo'>\n        <div className='length'>\n        <Typography variant=\"body1\" id=\"rotate-text\" color=\"textSecondary\" component=\"p\">\n          {Math.ceil(displayRatio * cmWidth / 1.6)} tiles\n        </Typography>\n        </div>\n      </div>\n\n      <div ref={canvasParentRef} className ='imgParent'>\n        <Card >\n          <CardActionArea >\n          <canvas ref={canvasRef}/> \n            <CardContent>\n              <Typography variant=\"h6\" color=\"textSecondary\" component=\"h6\">\n                {Math.ceil(cmWidth / 1.6)*Math.ceil(displayRatio * cmWidth / 1.6)} tiles\n              </Typography>\n              {csvData.length>0 ? chipData.map(chip => {\n\n               return <div key={chip.key} className='tileCount'>\n                      <input className = 'color' type=\"color\" disabled value={chip.label}></input>\n                      <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\n                        {chip.label}, {csvData.flat().filter(x => x.toUpperCase() === chip.label).length} tiles \n                      </Typography>\n                      </div>\n              })\n               : <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\n                  Upload a photo, adjust number of tiles, adjust number of colors, add desired hex codes.\n                 </Typography>}\n            </CardContent>\n          </CardActionArea>\n          <CardActions>\n            <Button size=\"small\" color=\"primary\">\n              <CSVLink className='link' data={csvData} filename={\"mosiac.csv\"}>Export</CSVLink>\n            </Button>\n            <Button size=\"small\" color=\"primary\" href=\"https://amzn.to/32vk1WF\" target='_blank'>\n              Tiles on Amazon\n            </Button>\n            <Button size=\"small\" color=\"primary\" href=\"https://taylorepskamp.github.io/diceify/\" target='_blank'>\n              Dice Mosaic App\n            </Button>\n          </CardActions>\n        </Card>\n        <Typography variant=\"body2\" color=\"textSecondary\" className='affiliate' component=\"p\">\n          Disclosure: As an Amazon Associate, I would earn from qualifying purchases.\n        </Typography>\n      </div>\n    </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}